package net.vpc.common.jeep.impl.types;

import net.vpc.common.jeep.*;
import net.vpc.common.jeep.core.types.DefaultJObject;
import net.vpc.common.jeep.core.DefaultJTypedValue;
import net.vpc.common.jeep.impl.functions.JSignature;
import net.vpc.common.jeep.util.JTypeUtils;

import java.lang.reflect.Modifier;

public class DefaultJConstructor extends AbstractJConstructor implements JRawConstructor{
    private JInvoke handler;
    private JType declaringType;
    private JSignature signature;
    private JSignature genericSignature;
    private String[] argNames;
    private int modifiers;
    private boolean autoGenerated;

    public DefaultJConstructor() {
    }

    public DefaultJConstructor setArgNames(String[] argNames) {
        this.argNames = argNames;
        return this;
    }

    @Override
    public JType[] argTypes() {
        return signature==null?null:signature.argTypes();
    }

    @Override
    public String[] argNames() {
        return argNames;
    }

    public DefaultJConstructor setGenericSignature(JSignature signature) {
        this.genericSignature = signature;
        this.signature=JSignature.of(genericSignature.name(),
                JTypeUtils.buildRawType(genericSignature.argTypes(),this),genericSignature.isVarArgs());
        return this;
    }

    @Override
    public JSignature genericSignature() {
        return genericSignature;
    }
    public boolean isAutoGenerated() {
        return autoGenerated;
    }

    public void setAutoGenerated(boolean autoGenerated) {
        this.autoGenerated = autoGenerated;
    }

    @Override
    public JSignature signature() {
        return signature;
    }

    @Override
    public boolean isPublic() {
        return Modifier.isPublic(modifiers());
    }

    public int modifiers() {
        return modifiers;
    }

    public int getModifiers() {
        return modifiers;
    }

    public DefaultJConstructor setModifiers(int modifiers) {
        this.modifiers = modifiers;
        return this;
    }

    public JInvoke getHandler() {
        return handler;
    }

    public DefaultJConstructor setHandler(JInvoke handler) {
        this.handler = handler;
        return this;
    }

    public JType declaringType() {
        return declaringType;
    }

    public DefaultJConstructor setDeclaringType(JType declaringType) {
        this.declaringType = declaringType;
        return this;
    }

//    public DefaultJConstructor setSignature(JSignature signature) {
//        this.signature = signature;
//        return this;
//    }

    @Override
    public Object invoke(JInvokeContext context) {
        DefaultJObject newInstance=new DefaultJObject(declaringType);
        context=context.builder()
                .instance(new DefaultJTypedValue(newInstance,declaringType))
                .name(declaringType.getName())
                .build();
        Object invokeResult = handler.invoke(context);
        return newInstance;
    }

    @Override
    public JType returnType() {
        return declaringType();
    }

    @Override
    public String name() {
        return declaringType.getName();
    }

    @Override
    public JDeclaration getDeclaration() {
        return declaringType();
    }

    @Override
    public JTypeVariable[] typeParameters() {
        return new JTypeVariable[0];
    }
}
